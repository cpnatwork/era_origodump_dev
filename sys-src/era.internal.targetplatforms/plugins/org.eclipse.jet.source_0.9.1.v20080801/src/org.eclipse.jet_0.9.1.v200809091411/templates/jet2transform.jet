<%@jet package="org.eclipse.jet.internal.compiler.templates" 
       class="JET2TransformGenerator" 
               %>
<%@jet imports="java.util.ArrayList"%>
<%@jet imports="java.util.Collections"%>
<%@jet imports="java.util.Iterator"%>
<%@jet imports="java.util.List"%>
<%@jet imports="java.util.Map"%>
<%@jet imports="org.eclipse.jet.internal.compiler.LoaderGenerationParameters"%>
<%
LoaderGenerationParameters parms = (LoaderGenerationParameters)context.getVariable("args"); //$NON-NLS-1$
Map templateMap = (Map) parms.getTemplateMap();;
boolean useJava5 = context.hasVariable("useJava5") ? Boolean.valueOf((String)context.getVariable("useJava5")).booleanValue() : false;
%>
package <%= parms.getPackageName() %>;

import java.util.HashMap;
import java.util.Map;

import org.eclipse.jet.JET2TemplateLoader;
import org.eclipse.jet.JET2TemplateLoaderExtension;
import org.eclipse.jet.JET2Template;

public class <%= parms.getClassName() %> implements JET2TemplateLoader, JET2TemplateLoaderExtension {

    private static final class TemplateFactoryMethod {

        private final String templatePath;
        private final String templateClass;

        public TemplateFactoryMethod(String templatePath, String templateClass) {
            this.templatePath = templatePath;
            this.templateClass = templateClass;
            
        }
        
        public String getTemplateClass() {
            return this.templateClass;
        }

        public String getTemplatePath() {
            return this.templatePath;
        }

        public JET2Template newTemplate() {
            JET2Template template = null;
            try {
                template = (JET2Template) Class.forName(this.templateClass).newInstance();
            } catch (InstantiationException e) {
                // ignore
            } catch (IllegalAccessException e) {
                // ignore
            } catch (ClassNotFoundException e) {
                // ignore
            }
            return template;
        }
        
        
    }

<% if(useJava5) { %>
    private Map<String,TemplateFactoryMethod> pathToFactoryMap = null;
<% } else { %>
    private Map pathToFactoryMap = null;
<% } %>
    
    private JET2TemplateLoader delegate = null;

    public <%= parms.getClassName() %>() {
        super();
    }

    public JET2Template getTemplate(String templatePath) {
        if(this.pathToFactoryMap == null) {
            initPathToFactoryMap();
        }
        TemplateFactoryMethod factory = (TemplateFactoryMethod)this.pathToFactoryMap.get(templatePath);
        return factory == null ? this.delegate == null ? null : this.delegate.getTemplate(templatePath) : factory.newTemplate();
    }

    private void addTemplate(String templatePath, String templateClass) {
        this.pathToFactoryMap.put(templatePath,
            new TemplateFactoryMethod(templatePath, templateClass));
    }
    
    private void initPathToFactoryMap() {
<%if(useJava5) { %>
        this.pathToFactoryMap = new HashMap<String,TemplateFactoryMethod>(<%= templateMap.size() %>);
<% } else { %>
        this.pathToFactoryMap = new HashMap(<%= templateMap.size() %>);
<% } %>
<% 
    List templatePaths = new ArrayList(templateMap.keySet());
    Collections.sort(templatePaths);
    for(Iterator i = templatePaths.iterator(); i.hasNext();){ 
        String key = (String)i.next();
        String value = (String)templateMap.get(key);
%>
            addTemplate("<%= key %>", "<%= value %>" ); //$NON-NLS-1$  //$NON-NLS-2$
<% } %>
    }

    public void setDelegateLoader(JET2TemplateLoader loader) {
        this.delegate = loader;
    }
    
    public JET2TemplateLoader getDelegateLoader() {
        return this.delegate;
    }
}

